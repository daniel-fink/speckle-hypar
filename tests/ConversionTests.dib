#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["c#","cs"],"languageName":"C#","name":"csharp"},{"aliases":["f#","fs"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"HTTP","name":"http"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"}]}}

#!markdown

# Interactive Tests for Format Conversions

#!markdown

## Speckle Conversion

#!csharp

#r "nuget: dotenv.net, *-*"

#r "nuget: Speckle.Core, *-*"
#r "nuget: Speckle.Objects, *-*"
#r "nuget: Hypar.Elements, *-*"
#!import extension.dib

#!csharp

#i "nuget:/Volumes/Data/Projects/SpeckleHypar/package"
#r "nuget: SpeckleHypar, *-*"

#!csharp

#!import Api.Speckle.dib

#!csharp

using Objects;
using Speckle;
using Speckle.Core.Models.Extensions;

using Elements;
using SpeckleHypar;

#!csharp

using dotenv.net;
DotEnv.Load();

#!csharp

var speckle = new SpeckleApi(DotEnv.Read()["SPECKLE_TOKEN"]); //Enter your Speckle token here
var root = speckle.GetCommit("c0f66c35e3");
root

#!csharp

var prop = (Speckle.Core.Models.Base)root["@property"];
var trunk = prop["@{0}"];
var trunks = (IList)trunk;
var branch = (Speckle.Core.Models.Base)trunks[0];
var relationships = (IList)branch["relationships"];
var relationship = (Speckle.Core.Models.Base)relationships[0];
var target = (Speckle.Core.Models.Base)relationship["target"];
target["speckle_type"]

#!csharp

var items = root.Flatten();
var buildingAhotel = items.First(item => item.id == "ef629b7b125e750815bb25d0e209b675");
buildingAhotel["name"]

#!csharp

buildingAhotel.GetDynamicMemberNames();
buildingAhotel["speckle_type"]

#!markdown

The Speckle Brep

#!csharp

var brep = (Objects.Geometry.Brep)items.First(item => item.id == "0dd7b4e3bf84de205add9ed0301a4e37");
Console.WriteLine("Speckle Type: " + brep["speckle_type"]);
Console.WriteLine("Volume: " + brep.volume);
Console.WriteLine("Faces Count: " + brep.Faces.Count);

#!markdown

Converting the Speckle Brep to a Solid

#!csharp

var solid = brep.FromSpeckle();
solid

#!csharp

Console.WriteLine("Solid's Mesh Volume: " + solid.Solid.ToMesh().Volume());
Console.WriteLine("Solid's Faces Count: " + solid.Solid.Faces.Count);
